// Generated by Tekla.Technology.Akit.ScriptBuilder
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Tekla.Structures.Model;
using Tekla.Structures.Model.UI;
using Tekla.Structures;
using Tekla.Structures.Geometry3d;
using tsm = Tekla.Structures.Model;
using tsmui = Tekla.Structures.Model.UI;


namespace Tekla.Technology.Akit.UserScript
{
    public class Script
    {
        static Model model = new Model();
        static Picker picker = new Picker();
        static tsmui.ModelObjectSelector modelObjectSelector = new tsmui.ModelObjectSelector();
        static ModelObjectEnumerator objectsToBeCopied;
        static ModelObjectEnumerator destinationObjects;
        static ModelObject sourceObject;

        public static void Run(Tekla.Technology.Akit.IScript akit)
        {
            objectsToBeCopied = modelObjectSelector.GetSelectedObjects();
            //Could be used if you instead want user to pick objects to be copied while macro is running. Bad idea becaus of that the picking with the API is´nt very smooth.
            //ModelObjectEnumerator objectsToBeCopied = picker.PickObjects(Picker.PickObjectsEnum.PICK_N_OBJECTS, "Pick object(s) to be copied");

            if (objectsToBeCopied.GetSize() == 0)
            {
                tsm.Operations.Operation.DisplayPrompt("You have to select objects before copying!");
                goto End;
            }

            try
            {
                sourceObject = picker.PickObject(Picker.PickObjectEnum.PICK_ONE_OBJECT, "Pick source object");
                destinationObjects = picker.PickObjects(Picker.PickObjectsEnum.PICK_N_PARTS, "Pick destination objects, can be multiple objects as well");
            }
            catch (Exception)
            {
                tsm.Operations.Operation.DisplayPrompt("User interrupt");
            }

            CoordinateSystem sourceCoordinationSystem = sourceObject.GetCoordinateSystem();
            try
            {
                while (destinationObjects.MoveNext())
                {
                    CoordinateSystem destionationCoordinateSystem = destinationObjects.Current.GetCoordinateSystem();

                    while (objectsToBeCopied.MoveNext())
                    {
                        if (destinationObjects.Current.Identifier.GUID != sourceObject.Identifier.GUID)
                        {
                            tsm.Operations.Operation.CopyObject(objectsToBeCopied.Current, sourceCoordinationSystem, destionationCoordinateSystem);

                        }
                    }
                    objectsToBeCopied.Reset();
                }
            }
            catch (Exception)
            {
                Tekla.Structures.Model.Operations.Operation.DisplayPrompt("Unknown error 1");
                goto End;
            }

            model.CommitChanges();
        End: ;
        }
    }
}
