// Generated by Tekla.Technology.Akit.ScriptBuilder
using System;
using Tekla.Structures.Model;
using Tekla.Structures.Model.UI;
using TSMU = Tekla.Structures.Model.UI;
using Tekla.Structures.Geometry3d;
using Tekla.Structures.Model.Operations;
using System.Threading;

// Notes
// Written by Jiancheng Zou at Pacific Computing for Tekla 18 localisation

namespace Tekla.Technology.Akit.UserScript
{
    public class Script
    {
        public static void Run(Tekla.Technology.Akit.IScript akit)
        {
            Model model = new Model();

            bool keepgoing = true;

            while (keepgoing)
            {
                try
                {
                    Picker picker = new Picker();
                    Part toBeRotated = picker.PickObject(Picker.PickObjectEnum.PICK_ONE_PART, "Pick a part") as Part;

                    Point centrePoint = picker.PickPoint("Pick centre point");
                    Point startPoint = picker.PickPoint("Pick start point");
                    Point endPoint = picker.PickPoint("Pick end point");

                    Vector centre2start = new Vector(startPoint.X - centrePoint.X, startPoint.Y - centrePoint.Y, startPoint.Z - centrePoint.Z);
                    Vector centre2end = new Vector(endPoint.X - centrePoint.X, endPoint.Y - centrePoint.Y, endPoint.Z - centrePoint.Z);
                    double angleInRadian = centre2end.GetAngleBetween(centre2start);
                    double angle = angleInRadian / Math.PI * 180;

                    Vector zAxisVector = Vector.Cross(centre2start, centre2end);

                    Vector startYVector = Vector.Cross(centre2start, zAxisVector);
                    Vector endYVector = Vector.Cross(centre2end, zAxisVector);

                    CoordinateSystem startCoord = new CoordinateSystem(centrePoint, centre2start.GetNormal(), startYVector.GetNormal());
                    CoordinateSystem endCoord = new CoordinateSystem(centrePoint, centre2end.GetNormal(), endYVector.GetNormal());

                    Part newBeam = Operation.CopyObject(toBeRotated, startCoord, endCoord) as Part;
                    model.CommitChanges();
                    if (newBeam != null)
                    {
                        ModelViewEnumerator viewEnumerator = ViewHandler.GetVisibleViews();
                        while (viewEnumerator.MoveNext())
                        {
                            TSMU.View ViewSel = viewEnumerator.Current;
                            ViewHandler.RedrawView(ViewSel);
                        }
                        Operation.DisplayPrompt("Copy rotate " + Math.Round(angle, 3) + "º successfully!");
                    }

                    Thread.Sleep(2000);
                }
                catch
                {
                    keepgoing = false;
                }
            }
        }
    }
}
