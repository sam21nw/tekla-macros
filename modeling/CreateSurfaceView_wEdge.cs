// Generated by Tekla.Technology.Akit.ScriptBuilder
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
// Tekla Structures namespaces
using Tekla.Structures;
using Tekla.Structures.Model;
using Tekla.Structures.Geometry3d;
using Tekla.Structures.Solid;
using Tekla.Structures.Model.UI;
using TSMUI = Tekla.Structures.Model.UI;
using T3D = Tekla.Structures.Geometry3d;
// Additional namespace references
using System.Collections;

// Notes
// Written by Christopher Keyack 8/24/10 originally in version 17.0 Work Versions
// This is a temporary extension meant for users until the Direct Manipulation functionality
// comes out in versions 17.1-18.0
// The idea of this application is simply to pick a surface and then an edge on any part
// and then a temporary view is created along that surface aligned with the picked edge of the part
// with the work plane changed along that edge, and then also
// the work area fit to that surface/part the surface belongs to.
// The Prompt Strings can be localized below.

namespace Tekla.Technology.Akit.UserScript
{
    public class Script
    {
        public static void Run(Tekla.Technology.Akit.IScript akit)
        {

            Model _model = new Model();

            bool keepgoing = true;
            TransformationPlane CurrPlane = new TransformationPlane();
            TSMUI.GraphicsDrawer GD1 = new GraphicsDrawer();

            // Type in the string name for the view label
            string SurfaceView = "Surface View";
            // Enter the distance in the decimal unit values your TS session is set to
            // if in USImp then set to decimal inches not mm.
            string DepthUp = "3.0";
            string DepthDown = "3.0";

            while (keepgoing)
            {
                try
                {
                    _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane());

                    Picker Pick1 = new Picker();
                    // This string localized in the messages ail files.
                    PickInput ThisFace = Pick1.PickFace("CSV_PickFace");
                    //PickInput ThisFace = Pick1.PickFace("Pick the surface to create a new View.");
                    IEnumerator ThisEnumerator = ThisFace.GetEnumerator();

                    Part ThisPart = null;
                    ArrayList Points = null;

                    while (ThisEnumerator.MoveNext())
                    {
                        InputItem ThisItem = ThisEnumerator.Current as InputItem;
                        if (ThisItem.GetInputType() == InputItem.InputTypeEnum.INPUT_1_OBJECT)
                        {
                            ThisPart = ThisItem.GetData() as Part;
                        }
                        if (ThisItem.GetInputType() == InputItem.InputTypeEnum.INPUT_POLYGON)
                        {
                            Points = ThisItem.GetData() as ArrayList;
                        }
                    }

                    double longestdistance = 0.0;
                    double Xdif = 0.0;
                    double Ydif = 0.0;
                    double Zdif = 0.0;
                    double Distance2Points = 0.0;
                    T3D.Point WorkOrigin = null;
                    T3D.Point WorkOffset = null;
                    for (int i = 1; i < Points.Count; i++)
                    {
                        T3D.Point ThisPoint = (T3D.Point)Points[i];
                        T3D.Point PreviousPoint = (T3D.Point)Points[i - 1];
                        double newdistance = T3D.Distance.PointToPoint(ThisPoint, PreviousPoint);
                        if (newdistance > longestdistance)
                        {
                            double Xdist = ThisPoint.X - PreviousPoint.X;
                            double Ydist = ThisPoint.Y - PreviousPoint.Y;
                            double Zdist = ThisPoint.Z - PreviousPoint.Z;
                            if (Math.Abs(Xdist) > 1 || Math.Abs(Ydist) > 1)
                            {
                                longestdistance = newdistance;
                                Xdif = ThisPoint.X - PreviousPoint.X;
                                Ydif = ThisPoint.Y - PreviousPoint.Y;
                                Zdif = ThisPoint.Z - PreviousPoint.Z;
                                Distance2Points = T3D.Distance.PointToPoint(new T3D.Point(ThisPoint.X, ThisPoint.Y, 0), new T3D.Point(PreviousPoint.X, PreviousPoint.Y, 0));
                                WorkOrigin = PreviousPoint;
                                WorkOffset = ThisPoint;
                            }
                        }
                    }

                    _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(WorkOrigin, new T3D.Vector(Xdif, Ydif, 0), new T3D.Vector(Xdif, Ydif, 0).Cross(new T3D.Vector(0, 0, -1))));
                    _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(new T3D.Point(0, 0, 0), new T3D.Vector(Distance2Points, 0, Zdif), new T3D.Vector(Distance2Points, 0, Zdif).Cross(new T3D.Vector(0, 0, -1))));
                    _model.CommitChanges();
                    Matrix ToThisPlane = _model.GetWorkPlaneHandler().GetCurrentTransformationPlane().TransformationMatrixToLocal;

                    foreach (T3D.Point CurrentPoint in Points)
                    {
                        if (CurrentPoint != WorkOrigin && CurrentPoint != WorkOffset && Math.Abs(ToThisPlane.Transform(CurrentPoint).X) > 0)
                        {
                            double NewX = ToThisPlane.Transform(CurrentPoint).X;
                            double NewY = ToThisPlane.Transform(CurrentPoint).Y;
                            double NewZ = ToThisPlane.Transform(CurrentPoint).Z;
                            _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(new T3D.Point(0, 0, 0), new Vector(1, 0, 0), new Vector(0, NewY, NewZ)));
                            break;
                        }
                    }

                    try
                    {
                        // This string localized in the messages ail files
                        ArrayList ThisPickedLine = Pick1.PickLine("CSV_PickEdge");
                        // ArrayList ThisPickedLine = Pick1.PickLine("Pick the part edge to align the new view.");

                        T3D.Point FirstPoint = (T3D.Point)ThisPickedLine[0];
                        T3D.Point SecondPoint = (T3D.Point)ThisPickedLine[1];

                        Vector XVector = new Vector(SecondPoint.X - FirstPoint.X, SecondPoint.Y - FirstPoint.Y, 0);
                        Vector YVector = XVector.Cross(new Vector(0, 0, -1));

                        _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(new TransformationPlane(new T3D.Point(FirstPoint.X, FirstPoint.Y, 0), XVector, YVector));

                        _model.CommitChanges();
                    }
                    catch
                    {

                    }

                    GD1.DrawLineSegment(new T3D.Point(0, 0, 0), new T3D.Point(0, 0, 300), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(-50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));

                    TSMUI.ModelObjectSelector Highlighter = new TSMUI.ModelObjectSelector();
                    ArrayList SelectedParts = new ArrayList();
                    SelectedParts.Add(ThisPart);
                    Highlighter.Select(SelectedParts);

                    akit.Callback("acmd_display_dialog", "dia_view_dialog", "main_frame");
                    akit.ValueChange("dia_view_dialog", "v1_name", "(" + SurfaceView + ": " + ThisPart.Name + ")");
                    akit.ValueChange("dia_view_dialog", "v1_perspective", "0");
                    akit.ValueChange("dia_view_dialog", "v1_share", "0");
                    akit.ValueChange("dia_view_dialog", "v1_depth_up", DepthUp);
                    akit.ValueChange("dia_view_dialog", "v1_depth_down", DepthDown);
                    akit.PushButton("v1_apply", "dia_view_dialog");
                    akit.PushButton("v1_ok", "dia_view_dialog");

                    akit.Callback("acmd_create_view_to_workplane", "", "main_frame");
                    akit.Callback("acmd_fit_workarea_by_parts", "", "main_frame");

                    GD1.DrawLineSegment(new T3D.Point(0, 0, 0), new T3D.Point(0, 0, 300), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(-50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));

                    CurrPlane = _model.GetWorkPlaneHandler().GetCurrentTransformationPlane();
                }
                catch
                {
                    keepgoing = false;
                    _model.GetWorkPlaneHandler().SetCurrentTransformationPlane(CurrPlane);
                    _model.CommitChanges();
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 0), new T3D.Point(0, 0, 300), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                    GD1.DrawLineSegment(new T3D.Point(0, 0, 300), new T3D.Point(-50, 0, 250), new Tekla.Structures.Model.UI.Color(1, 0, 0));
                }
            }
        }
    }
}
